require('dotenv').config();
const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const cors = require('cors');
const session = require('express-session');
const flash = require('connect-flash');
const morgan = require('morgan');
const fs = require('fs');
const { google } = require('googleapis');

// 라우트 가져오기
const apiRoutes = require('./routes/api/index');
const authRoutes = require('./routes/auth');
const indexRoutes = require('./routes/index');

const app = express();
const PORT = process.env.PORT || 3000;

// 환경 변수 설정 (기존 환경 변수가 없는 경우에만 설정)
process.env.USE_SERVICE_ACCOUNT = process.env.USE_SERVICE_ACCOUNT || 'true';

// Vercel 환경에서 서비스 계정 키 처리
let authGoogle;
let sheets;

try {
  // 환경 변수에서 서비스 계정 키를 가져와 파일로 저장 (Vercel 환경용)
  if (process.env.SERVICE_ACCOUNT_KEY) {
    try {
      console.log('환경 변수에서 서비스 계정 키를 가져옵니다.');
      const serviceAccountPath = path.join(__dirname, 'service-account.json');
      fs.writeFileSync(serviceAccountPath, process.env.SERVICE_ACCOUNT_KEY);
      process.env.SERVICE_ACCOUNT_KEY_PATH = serviceAccountPath;
      console.log('서비스 계정 키 파일이 생성되었습니다:', serviceAccountPath);
    } catch (writeError) {
      console.error('서비스 계정 키 파일 저장 중 오류:', writeError);
      // 파일 저장 실패 시 기본 값 설정
      process.env.SERVICE_ACCOUNT_KEY_PATH = './service-account.json';
    }
  } else {
    console.log('환경 변수에 서비스 계정 키가 없습니다. 파일 시스템에서 찾습니다.');
  }

  // 서비스 계정 키 파일 존재 확인
  const keyFilePath = path.join(__dirname, 'service-account.json');
  const keyFileExists = fs.existsSync(keyFilePath);
  console.log(`서비스 계정 키 파일 존재 여부: ${keyFileExists}`);

  try {
    // 구글시트 인증 설정
    authGoogle = new google.auth.GoogleAuth({
      keyFile: path.join(__dirname, 'service-account.json'),
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    // 구글시트 API 클라이언트 생성
    sheets = google.sheets({ version: 'v4', auth: authGoogle });
    console.log('Google Sheets API 클라이언트가 성공적으로 초기화되었습니다.');
  } catch (authError) {
    console.error('Google Sheets API 인증 중 오류 발생:', authError);
    // 인증 실패에도 서버 실행 계속
  }
} catch (error) {
  console.error('Google Sheets API 초기화 중 오류 발생:', error);
  // 초기화 오류에도 서버 실행 계속
}

// 기본 미들웨어 설정
app.use(cors({
  credentials: true,
  origin: '*', // 모든 origin 허용
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

console.log('모든 원본(origin)에서의 CORS 요청을 허용하도록 설정됨');
app.use(morgan('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// 세션 설정 - 메모리 세션으로 변경
app.use(session({
  secret: process.env.SESSION_SECRET || 'monitoring_session_secret',
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: false,  // 로컬 환경에서는 false로 설정
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000, // 24시간
    sameSite: 'lax'  // CSRF 보호
  }
}));

// connect-flash 설정
app.use(flash());

// req.flash가 없을 때 대체 함수 제공
app.use((req, res, next) => {
  if (!req.flash) {
    req.flash = function(type, message) {
      if (!req.session.flash) {
        req.session.flash = {};
      }
      if (!req.session.flash[type]) {
        req.session.flash[type] = [];
      }
      if (message) {
        req.session.flash[type].push(message);
      }
      return req.session.flash[type];
    };
  }
  next();
});

// 디버깅용 미들웨어
app.use((req, res, next) => {
  console.log(`요청 수신: ${req.method} ${req.url}`);
  if (req.session && req.session.committee) {
    console.log(`인증된 사용자: ${req.session.committee.name}`);
  } else {
    console.log('인증되지 않은 요청');
  }
  next();
});

// 라우트 설정
console.log('API 라우트 설정 시작...');
// API 라우트: /api/* 경로 처리 
app.use('/api', apiRoutes);

// 구글 시트 직접 테스트 라우트 추가
const directTestRouter = require('./api/direct-test');
app.use('/api', directTestRouter);
console.log('API 라우트 설정 완료');

console.log('인증 라우트 설정 시작...');
// 인증 라우트: /auth/* 경로 처리
app.use('/auth', authRoutes);
console.log('인증 라우트 설정 완료');

console.log('기본 라우트 설정 시작...');
// 기본 페이지 라우트: 위의 모든 라우트에 해당하지 않는 경로 처리
app.use('/', indexRoutes);
console.log('기본 라우트 설정 완료');

// SPA 지원을 위한 기본 경로 - API 경로가 아닌 모든 요청은 index.html로 제공
app.use((req, res, next) => {
  if (!req.path.startsWith('/api') && !req.path.startsWith('/auth')) {
    return res.sendFile(path.join(__dirname, 'public', 'index.html'));
  }
  next();
});

// 구글 시트 일정 데이터 API 엔드포인트
app.get('/api/sheets/schedules', async (req, res) => {
  try {
    // 구글시트 ID와 범위 설정
    const spreadsheetId = '11eWVWRY2cTU5nat3zsTSTjvhvk-LxhistC1LmfBNvPU';
    const range = '방문일정!A:I'; // 방문일정 시트

    // 구글시트 API 호출
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range,
    });

    const rows = response.data.values;

    if (!rows || rows.length === 0) {
      return res.status(200).json({
        status: 'success',
        schedules: []
      });
    }

    // 헤더 행 가져오기
    const headers = rows[0];

    // 데이터 행 처리 (헤더 제외)
    const schedules = rows.slice(1).map(row => {
      const schedule = {};
      
      // 각 열을 헤더와 매핑하여 객체 생성
      headers.forEach((header, index) => {
        if (row[index] !== undefined) {
          schedule[header] = row[index];
        } else {
          schedule[header] = '';
        }
      });
      
      return schedule;
    });

    res.status(200).json({
      status: 'success',
      schedules
    });
  } catch (error) {
    console.error('구글시트 일정 데이터 조회 실패:', error);
    res.status(500).json({
      status: 'error',
      message: '구글시트 일정 데이터를 가져오는데 실패했습니다.',
      error: error.message
    });
  }
});

// 구글 시트에 일정 데이터 저장하는 API 엔드포인트
app.post('/api/sheets/schedules', async (req, res) => {
  try {
    const { sheetName, schedules } = req.body;
    
    if (!sheetName || !schedules || !Array.isArray(schedules)) {
      return res.status(400).json({
        status: 'error',
        message: '유효하지 않은 요청 형식입니다.'
      });
    }
    
    console.log(`구글 시트 '${sheetName}'에 ${schedules.length}개의 일정 데이터 저장 시도`);
    
    // 구글시트 ID 설정
    const spreadsheetId = '11eWVWRY2cTU5nat3zsTSTjvhvk-LxhistC1LmfBNvPU';
    
    // 기존 시트 데이터 가져오기
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range: `${sheetName}!A:I`,
    });
    
    const rows = response.data.values || [];
    
    // 헤더 행 처리
    let headers;
    if (rows.length === 0) {
      // 시트가 비어있는 경우, 헤더 행 생성
      headers = ['위원ID', '위원명', '기관코드', '기관명', '방문일자', '방문시간', '목적', '메모', '상태'];
      await sheets.spreadsheets.values.update({
        spreadsheetId,
        range: `${sheetName}!A1:I1`,
        valueInputOption: 'RAW',
        resource: {
          values: [headers]
        }
      });
    } else {
      headers = rows[0];
    }
    
    // 데이터 행 생성
    const values = schedules.map(schedule => [
      schedule.위원ID || '',
      schedule.위원명 || '',
      schedule.기관코드 || '',
      schedule.기관명 || '',
      schedule.방문일자 || '',
      schedule.방문시간 || '',
      schedule.목적 || '',
      schedule.메모 || '',
      schedule.상태 || 'pending'
    ]);
    
    // 기존 데이터 삭제 (헤더 제외)
    if (rows.length > 1) {
      await sheets.spreadsheets.values.clear({
        spreadsheetId,
        range: `${sheetName}!A2:I${rows.length}`
      });
    }
    
    // 새 데이터 추가
    if (values.length > 0) {
      await sheets.spreadsheets.values.update({
        spreadsheetId,
        range: `${sheetName}!A2:I${values.length + 1}`,
        valueInputOption: 'RAW',
        resource: {
          values: values
        }
      });
    }
    
    return res.status(200).json({
      status: 'success',
      message: '일정 데이터가 구글 시트에 성공적으로 저장되었습니다.'
    });
  } catch (error) {
    console.error('구글 시트에 일정 데이터 저장 오류:', error);
    return res.status(500).json({
      status: 'error',
      message: '구글 시트에 일정 데이터를 저장하는 중 오류가 발생했습니다.',
      error: error.message
    });
  }
});

// 위원별 담당기관 데이터를 가져오는 API 엔드포인트
app.get('/api/sheets/organizations', async (req, res) => {
  try {
    // 구글시트 ID와 범위 설정
    const spreadsheetId = '11eWVWRY2cTU5nat3zsTSTjvhvk-LxhistC1LmfBNvPU';
    const range = '위원별_담당기관!A:G'; // A:C에서 A:G로 변경하여 G열(담당유형)까지 포함

    // 요청에서 위원명 가져오기 (기본값: 신용기)
    const committeeName = req.query.committeeName || '신용기';
    console.log(`구글시트 데이터 요청: 위원명=${committeeName}, 범위=${range}`);

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range,
    });

    const rows = response.data.values;
    console.log(`구글시트 원본 데이터: ${rows ? rows.length : 0}행`);

    if (!rows || rows.length === 0) {
      console.log('구글시트 데이터가 없습니다.');
      return res.status(404).json({ error: '데이터가 없습니다.' });
    }

    // 데이터 파싱
    const organizations = {
      main: [],
      sub: []
    };

    // 헤더 제외하고 데이터 처리
    for (let i = 1; i < rows.length; i++) {
      // 시트 구조에 맞게 데이터 추출
      const [committeeId, rowCommitteeName, orgId, orgCode, orgName, region, role] = rows[i];
      
      // 요청한 위원명과 일치하는 데이터만 처리
      if (rowCommitteeName && rowCommitteeName.trim() === committeeName) {
        if (role && role.trim() === '주담당') {
          organizations.main.push({
            id: orgId || orgCode,
            code: orgCode,
            name: orgName,
            region: region || '경상남도'
          });
        } else if (role && role.trim() === '부담당') {
          organizations.sub.push({
            id: orgId || orgCode,
            code: orgCode,
            name: orgName,
            region: region || '경상남도'
          });
        }
      }
    }

    // 기관 코드만 필요한 경우를 위해 코드 배열도 함께 제공
    const mainCodes = organizations.main.map(org => org.code);
    const subCodes = organizations.sub.map(org => org.code);

    console.log(`구글시트에서 가져온 ${committeeName} 위원 담당기관: 주담당 ${organizations.main.length}개, 부담당 ${organizations.sub.length}개`);
    
    res.json({
      status: 'success',
      organizations: {
        main: mainCodes,
        sub: subCodes
      },
      organizationObjects: {
        main: organizations.main,
        sub: organizations.sub
      }
    });
  } catch (error) {
    console.error('구글시트 데이터 조회 실패:', error);
    res.status(500).json({
      status: 'error',
      message: '구글시트 데이터를 가져오는데 실패했습니다.',
      error: error.message
    });
  }
});

// 구글 시트에 기관 추가하는 API 엔드포인트
app.post('/api/sheets/organizations', async (req, res) => {
  try {
    // 요청 데이터 검증
    const { code, name, region, note, action } = req.body;
    
    if (!code || !name || !region) {
      return res.status(400).json({
        status: 'error',
        message: '필수 필드가 누락되었습니다. (code, name, region)'
      });
    }
    
    if (action !== 'add') {
      return res.status(400).json({
        status: 'error',
        message: '지원하지 않는 액션입니다.'
      });
    }
    
    console.log(`기관 추가 API 요청: ${name} (${code})`);
    
    // 구글 시트 연동을 위한 설정
    const sheetsHelper = require('./api/sheets-helper');
    const spreadsheetId = process.env.SPREADSHEET_ID || '11eWVWRY2cTU5nat3zsTSTjvhvk-LxhistC1LmfBNvPU';
    const range = '기관_목록!A:E'; // 기관 목록 시트 범위
    
    // 기존 데이터 가져오기
    const existingData = await sheetsHelper.readSheetData(spreadsheetId, range);
    
    if (!existingData || existingData.length === 0) {
      return res.status(500).json({
        status: 'error',
        message: '기관 목록 데이터를 가져오는데 실패했습니다.'
      });
    }
    
    // 헤더 확인
    const headers = existingData[0];
    const rows = existingData.slice(1);
    
    // 중복 코드 확인
    const codeIndex = headers.indexOf('code') !== -1 ? headers.indexOf('code') : headers.indexOf('기관코드');
    const isDuplicate = rows.some(row => row[codeIndex] === code);
    
    if (isDuplicate) {
      return res.status(400).json({
        status: 'error',
        message: `이미 존재하는 기관 코드(${code})입니다.`
      });
    }
    
    // 새 기관 ID 생성
    const idIndex = headers.indexOf('id') !== -1 ? headers.indexOf('id') : headers.indexOf('기관ID');
    const newOrgId = rows.length > 0 ? Number(rows[rows.length - 1][idIndex]) + 1 : 1;
    
    // 새 기관 데이터 포맷팅
    const newOrg = [];
    headers.forEach(header => {
      if (header === 'id' || header === '기관ID') {
        newOrg.push(newOrgId.toString());
      } else if (header === 'code' || header === '기관코드') {
        newOrg.push(code);
      } else if (header === 'name' || header === '기관명') {
        newOrg.push(name);
      } else if (header === 'region' || header === '지역') {
        newOrg.push(region);
      } else if (header === 'note' || header === '비고') {
        newOrg.push(note || '');
      } else {
        newOrg.push('');
      }
    });
    
    // 1. 기관목록 시트에 추가
    await sheetsHelper.appendRow(spreadsheetId, '기관_목록', newOrg);
    console.log(`기관_목록 시트에 기관 추가 성공: ${name} (${code})`);
    
    // 2. 위원별_담당기관 시트에도 매칭 정보 추가
    const { mainCommitteeId, subCommitteeId } = req.body;
    
    // 위원별_담당기관 시트 데이터 가져오기
    const matchingData = await sheetsHelper.readSheetData(spreadsheetId, '위원별_담당기관!A1:H');
    
    if (!matchingData || matchingData.length === 0) {
      console.warn('위원별_담당기관 시트 데이터를 가져오는데 실패했습니다. 기관목록에만 추가합니다.');
    } else {
      // 위원별_담당기관 시트 헤더 확인
      const matchingHeaders = matchingData[0];
      
      // 주담당 위원 정보 추가 (있는 경우)
      if (mainCommitteeId) {
        const mainCommitteeName = req.body.mainCommitteeName || '신용기'; // 기본값 설정
        const mainMatchingRow = [
          mainCommitteeId,
          mainCommitteeName,
          newOrgId.toString(),
          code,
          name,
          region,
          '주담당',
          note || ''
        ];
        
        await sheetsHelper.appendRow(spreadsheetId, '위원별_담당기관', mainMatchingRow);
        console.log(`위원별_담당기관 시트에 주담당 매칭 정보 추가: ${mainCommitteeName} - ${name}`);
      }
      
      // 부담당 위원 정보 추가 (있는 경우)
      if (subCommitteeId) {
        const subCommitteeName = req.body.subCommitteeName || '마스터'; // 기본값 설정
        const subMatchingRow = [
          subCommitteeId,
          subCommitteeName,
          newOrgId.toString(),
          code,
          name,
          region,
          '부담당',
          note || ''
        ];
        
        await sheetsHelper.appendRow(spreadsheetId, '위원별_담당기관', subMatchingRow);
        console.log(`위원별_담당기관 시트에 부담당 매칭 정보 추가: ${subCommitteeName} - ${name}`);
      }
    }
    
    // 추가된 기관 객체 반환
    const addedOrganization = {};
    headers.forEach((header, index) => {
      addedOrganization[header] = newOrg[index] || '';
    });
    
    // 성공 응답
    return res.status(201).json({
      status: 'success',
      message: '기관이 성공적으로 추가되었습니다.',
      data: {
        organization: addedOrganization,
        timestamp: Date.now()
      }
    });
    
  } catch (error) {
    console.error('구글 시트에 기관 추가 중 오류:', error);
    res.status(500).json({
      status: 'error',
      message: '서버 오류가 발생했습니다.',
      error: error.message
    });
  }
});

// 구글 시트에서 기관을 삭제하는 API 엔드포인트
app.delete('/api/organizations-delete', async (req, res) => {
  try {
    // 요청에서 기관 코드 가져오기
    const { code } = req.query;
    
    if (!code) {
      return res.status(400).json({
        status: 'error',
        message: '기관 코드가 지정되지 않았습니다.'
      });
    }
    
    console.log(`기관 삭제 API 요청: 기관 코드 ${code}`);
    
    // 구글 시트 연동을 위한 설정
    const sheetsHelper = require('./api/sheets-helper');
    
    // 1. 기관_목록 시트에서 기관 삭제
    try {
      await sheetsHelper.deleteOrganization(code);
      console.log(`기관_목록 시트에서 기관 삭제 성공: ${code}`);
    } catch (orgDeleteError) {
      console.error(`기관_목록 시트에서 기관 삭제 실패:`, orgDeleteError);
      // 기관 삭제 실패를 오류로 처리하지 않고 계속 진행
    }
    
    // 2. 위원별_담당기관 시트에서 관련 매칭 삭제
    try {
      // 위원별_담당기관 시트 데이터 가져오기
      const spreadsheetId = process.env.SPREADSHEET_ID || '11eWVWRY2cTU5nat3zsTSTjvhvk-LxhistC1LmfBNvPU';
      const matchingData = await sheetsHelper.readSheetData(spreadsheetId, '위원별_담당기관!A1:H');
      
      if (!matchingData || matchingData.length <= 1) {
        console.warn('위원별_담당기관 시트 데이터를 가져오는데 실패했거나 데이터가 없습니다.');
      } else {
        // 헤더 행 및 데이터 행 분리
        const headers = matchingData[0];
        const rows = matchingData.slice(1);
        
        // 기관 코드 인덱스 찾기
        const codeIndex = headers.indexOf('orgCode') !== -1 ? headers.indexOf('orgCode') : headers.indexOf('기관코드');
        
        if (codeIndex === -1) {
          console.warn('위원별_담당기관 시트에서 기관코드 열을 찾을 수 없습니다.');
        } else {
          // 삭제할 행 찾기
          for (let i = 0; i < rows.length; i++) {
            if (rows[i][codeIndex] === code) {
              try {
                // 시트에서 해당 행 삭제 (인덱스는 1부터 시작하고, 헤더 행이 있으므로 +1)
                await sheetsHelper.deleteRow('위원별_담당기관', i + 2);
                console.log(`위원별_담당기관 시트에서 매칭 삭제 성공: 행 ${i + 2}`);
              } catch (deleteError) {
                console.error(`위원별_담당기관 시트에서 행 삭제 실패:`, deleteError);
              }
            }
          }
        }
      }
    } catch (matchingError) {
      console.error('매칭 정보 삭제 중 오류:', matchingError);
    }
    
    // 성공 응답
    return res.status(200).json({
      status: 'success',
      message: `기관(${code})이 성공적으로 삭제되었습니다.`
    });
    
  } catch (error) {
    console.error('구글 시트에서 기관 삭제 중 오류:', error);
    res.status(500).json({
      status: 'error',
      message: '서버 오류가 발생했습니다.',
      error: error.message
    });
  }
});

// 위원별 담당기관 매칭 데이터를 가져오는 API 엔드포인트
app.get('/api/sheets/committee-orgs', require('./api/committee-orgs'));

// 일정 데이터 저장소 - 서버 메모리에 저장
// 실제 프로덕션에서는 데이터베이스를 사용해야 함
const scheduleStorage = {
  schedules: [],
  lastUpdated: null
};

// 일정 데이터 가져오기 API
app.get('/api/schedules', async (req, res) => {
  try {
    // 저장된 일정 데이터가 있는지 확인
    if (scheduleStorage.schedules && scheduleStorage.schedules.length > 0) {
      console.log(`서버 메모리에서 ${scheduleStorage.schedules.length}개의 일정 데이터 반환`);
      return res.json(scheduleStorage.schedules);
    }
    
    // 일정 데이터가 없으면 구글 시트에서 가져오기 시도
    console.log('구글 시트에서 일정 데이터 가져오기 시도');
    const sheetsHelper = require('./api/sheets-helper');
    const scheduleData = await sheetsHelper.readSheetData(process.env.SPREADSHEET_ID, '일정!A1:Z1000');
    
    if (scheduleData && scheduleData.length > 1) {
      // 첫 번째 행은 헤더
      const headers = scheduleData[0];
      const formattedSchedules = [];
      
      // 데이터 행 처리
      for (let i = 1; i < scheduleData.length; i++) {
        const row = scheduleData[i];
        if (row.length < 5) continue; // 유효한 데이터가 아니면 건너뛰기
        
        // 시트 구조에 맞게 데이터 추출
        const schedule = {
          id: `schedule_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
          date: row[0] || new Date().toISOString().split('T')[0],
          visitDate: row[0] || new Date().toISOString().split('T')[0],
          scheduleDate: row[0] || new Date().toISOString().split('T')[0],
          committeeName: row[1] || '미지정',
          organizationName: row[2] || '미지정',
          orgName: row[2] || '미지정',
          orgCode: row[3] || '',
          startTime: row[4] || '09:00',
          endTime: row[5] || '10:00',
          time: `${row[4] || '09:00'} - ${row[5] || '10:00'}`,
          status: row[6] || 'pending',
          notes: row[7] || '',
          memo: row[7] || '',
          createdAt: new Date().toISOString()
        };
        
        formattedSchedules.push(schedule);
      }
      
      // 서버 메모리에 저장
      scheduleStorage.schedules = formattedSchedules;
      scheduleStorage.lastUpdated = new Date().toISOString();
      
      console.log(`구글 시트에서 ${formattedSchedules.length}개의 일정 데이터 가져옴`);
      return res.json(formattedSchedules);
    } else {
      // 시트에 데이터가 없으면 샘플 데이터 생성
      console.log('구글 시트에 데이터가 없음, 샘플 데이터 생성');
      const sampleSchedules = generateSampleSchedules();
      
      // 서버 메모리에 저장
      scheduleStorage.schedules = sampleSchedules;
      scheduleStorage.lastUpdated = new Date().toISOString();
      
      return res.json(sampleSchedules);
    }
  } catch (error) {
    console.error('일정 데이터 가져오기 오류:', error);
    res.status(500).json({
      status: 'error',
      message: '일정 데이터를 가져오는데 실패했습니다.',
      error: error.message
    });
  }
});

// 일정 데이터 저장 API
app.post('/api/schedules', (req, res) => {
  try {
    const newSchedules = req.body;
    
    if (!Array.isArray(newSchedules)) {
      return res.status(400).json({
        status: 'error',
        message: '유효한 일정 데이터 형식이 아닙니다. 배열 형태로 전송해주세요.'
      });
    }
    
    // 서버 메모리에 저장
    scheduleStorage.schedules = newSchedules;
    scheduleStorage.lastUpdated = new Date().toISOString();
    
    console.log(`${newSchedules.length}개의 일정 데이터 저장 완료`);
    
    res.json({
      status: 'success',
      message: `${newSchedules.length}개의 일정 데이터가 저장되었습니다.`,
      lastUpdated: scheduleStorage.lastUpdated
    });
  } catch (error) {
    console.error('일정 데이터 저장 오류:', error);
    res.status(500).json({
      status: 'error',
      message: '일정 데이터를 저장하는데 실패했습니다.',
      error: error.message
    });
  }
});

// 샘플 일정 데이터 생성 함수
function generateSampleSchedules() {
  console.log('샘플 일정 데이터 생성');
  const today = new Date();
  const year = today.getFullYear();
  const month = today.getMonth();
  
  // 기관 목록 - 실제 데이터 기반
  const allOrganizations = [
    { code: 'A48170002', name: '대한노인회 고성군지회', address: '경상남도 고성군 고성읍 중앙로 145' },
    { code: 'A48170003', name: '한올생명의집', address: '경상남도 고성군 개천면 청광리 201-1' },
    { code: 'A48240001', name: '화방남해', address: '경상남도 남해군 남해읍 남해대로 2935-3' },
    { code: 'A48240002', name: '화방재가', address: '경상남도 남해군 남해읍 남해대로 2935-3' },
    { code: 'A48840001', name: '사랑원', address: '경상남도 사천시 사천읍 구암두문로 254-9' },
    { code: 'A48840002', name: '사천노인', address: '경상남도 사천시 용현면 진삼로 447' },
    { code: 'A48850001', name: '나누리', address: '경상남도 진주시 문산읍 동부로 702' },
    { code: 'A48850002', name: '진양', address: '경상남도 진주시 진성면 진성로 1194' },
    { code: 'A48170001', name: '진주', address: '경상남도 진주시 진주대로 875' },
    { code: 'B12345678', name: '경남하동', address: '경상남도 하동군 하동읍 중앙로 70' },
    { code: 'B87654321', name: '하동노인', address: '경상남도 하동군 하동읍 읍내리 291-1' },
    { code: 'C12345678', name: '창원도우누리통합재가센터', address: '경상남도 창원시 의창구 의창동 234-5' }
  ];
  
  // 위원 목록
  const committees = [
    { name: '신용기', orgs: ['A48170002', 'A48170003', 'A48240001', 'A48240002'] },
    { name: '김수연', orgs: ['A48840001', 'A48840002'] },
    { name: '문일지', orgs: ['A48850001', 'A48850002'] },
    { name: '이연숙', orgs: ['A48170001', 'B12345678'] },
    { name: '이정혜', orgs: ['B87654321', 'C12345678'] }
  ];
  
  // 일정 상태 옵션
  const statusOptions = [
    { value: 'pending', label: '예정', probability: 0.5 },
    { value: 'completed', label: '완료', probability: 0.3 },
    { value: 'canceled', label: '취소', probability: 0.2 }
  ];
  
  // 방문 유형
  const visitTypes = ['정기평가', '수시평가', '컨설팅', '민원조사', '특별점검'];
  
  // 샘플 일정 생성
  const schedules = [];
  
  // 이번 달과 다음 달에 대한 일정 생성
  for (let m = 0; m < 2; m++) {
    const targetMonth = (month + m) % 12;
    const targetYear = year + Math.floor((month + m) / 12);
    
    // 각 위원별로 담당 기관에 대한 일정 생성
    committees.forEach((committee) => {
      // 이번 달에 담당 기관별로 1개의 일정 생성
      committee.orgs.forEach(orgCode => {
        // 해당 기관 정보 찾기
        const org = allOrganizations.find(o => o.code === orgCode);
        if (!org) return;
        
        // 랜덤 날짜 (1-28일)
        const day = 1 + Math.floor(Math.random() * 28);
        const date = new Date(targetYear, targetMonth, day);
        const dateStr = date.toISOString().split('T')[0];
        
        // 방문 시간 (9-17시)
        const startHour = 9 + Math.floor(Math.random() * 7);
        const startMinute = [0, 30][Math.floor(Math.random() * 2)];
        const duration = [60, 90, 120][Math.floor(Math.random() * 3)]; // 1시간, 1시간 30분, 2시간
        
        // 종료 시간 계산
        let endHour = startHour;
        let endMinute = startMinute + duration;
        if (endMinute >= 60) {
          endHour += Math.floor(endMinute / 60);
          endMinute = endMinute % 60;
        }
        
        // 시간 형식 포맷팅
        const startTimeStr = `${startHour.toString().padStart(2, '0')}:${startMinute.toString().padStart(2, '0')}`;
        const endTimeStr = `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`;
        
        // 상태 결정 (가중치 적용)
        let status;
        const rand = Math.random();
        let cumulativeProbability = 0;
        for (const option of statusOptions) {
          cumulativeProbability += option.probability;
          if (rand <= cumulativeProbability) {
            status = option.value;
            break;
          }
        }
        
        // 방문 유형 선택
        const visitType = visitTypes[Math.floor(Math.random() * visitTypes.length)];
        
        // 일정 생성
        schedules.push({
          id: `schedule_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
          date: dateStr,
          visitDate: dateStr,
          scheduleDate: dateStr,
          committeeName: committee.name,
          organizationName: org.name,
          orgName: org.name,
          orgCode: org.code,
          orgAddress: org.address,
          startTime: startTimeStr,
          endTime: endTimeStr,
          time: `${startTimeStr} - ${endTimeStr}`,
          status: status,
          visitType: visitType,
          notes: `${org.name} ${visitType} 방문`,
          memo: `${org.name} ${visitType} 방문 일정 (${org.address})`,
          createdAt: new Date(date.getTime() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString() // 최대 7일 전에 생성된 것으로 설정
        });
      });
    });
  }
  
  return schedules;
}
app.post('/api/save-to-sheet', async (req, res) => {
  try {
    console.log('구글 시트에 점검 데이터 저장 API 호출됨');
    console.log('Request body:', req.body);
    
    // 클라이언트에서 받은 데이터 확인
    const {
      indicatorId,
      orgCode,
      orgName,   // 클라이언트에서 전송한 기관명
      indicatorName: clientIndicatorName, // 클라이언트에서 전송한 지표명
      comment,
      monthlyStatus,
      timestamp,
      user,
      userCode // 클라이언트에서 전송한 위원코드
    } = req.body;
      } catch (e) {
        console.error('월별 상태 파싱 오류:', e);
        checkedMonths = [];
      }
      
      // 점검한 월 문자열로 변환 (1,2,6월 형태)
      const checkedMonthsStr = checkedMonths.length > 0 ? checkedMonths.join(',') + '월' : '-';
      
      // 저장할 데이터 확인
      const saveValues = [
        userCode || user,  // 위원코드 (전송된 위원코드 우선 사용)
        orgCode,           // 기관코드
        orgName,           // 기관명
        user,              // 위원명
        dateStr,           // 모니터링날짜
        timeStr,           // 모니터링시간
        indicatorId,       // 지표ID
        indicatorName,     // 지표명
        monthlyCheck,      // 결과
        monthlyStatusStr,  // 체크리스트결과
        comment || '',     // 의견 (L열, 11번째 열)
        checkedMonthsStr    // 점검한 월
      ];
      
      // 추가 지표(l004) 저장 로직 제거 - 중복 저장 문제 해결
      
      try {
        // 지표 데이터 저장
        const result = await sheetsHelper.appendRow({
          spreadsheetId: spreadsheetId,
          sheetName: sheetName,
          values: saveValues
        });
        
        console.log('지표 저장 성공:', result);
        
        console.log('구글 시트 저장 성공:', result);
        
        return res.status(200).json({
          status: 'success',
          message: `점검 데이터가 '${sheetName}' 시트에 성공적으로 저장되었습니다.`,
          data: {
            sheetName: sheetName
          }
        });
      } catch (apiError) {
        console.error('구글 시트 API 호출 오류:', apiError);
        console.error('오류 상세 정보:', apiError.stack);
        
        // 오류 응답 반환
        return res.status(500).json({
          status: 'error',
          message: `구글 시트 저장 오류: ${apiError.message}`,
          error: apiError.message
        });
      }
    } catch (error) {
      console.error('서버 오류:', error);
      console.error('오류 상세 정보:', error.stack);
  
      return res.status(500).json({
        status: 'error',
        message: `서버 오류: ${error.message}`,
        error: error.message
      });
    }
  } catch (error) {
    console.error('서버 오류:', error);
    console.error('오류 상세 정보:', error.stack);

    return res.status(500).json({
      status: 'error',
      message: `서버 오류: ${error.message}`,
      error: error.message
    });
  }
});





// 404 에러 처리
app.use((req, res, next) => {
  console.log(`404 Not Found: ${req.method} ${req.url}`);
  res.status(404).json({
    status: 'error',
    message: '요청한 리소스를 찾을 수 없습니다.'
  });
});

// 에러 처리 미들웨어
app.use((err, req, res, next) => {
  console.error('Server error:', err.stack);
  res.status(500).json({ 
    error: 'Internal server error', 
    message: err.message,
    path: req.path,
    method: req.method,
    timestamp: new Date().toISOString()
  });
});

// Vercel 환경에서 사용할 기본 라우트 추가
app.get('/api/health', (req, res) => {
  res.status(200).json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV,
    googleSheetsInitialized: !!sheets
  });
});

// Vercel 환경에서는 서버를 시작하지 않음
if (process.env.NODE_ENV !== 'production') {
  // 로컬 환경에서만 서버 시작
  const startServer = (port) => {
    const server = app.listen(port)
      .on('error', (err) => {
        if (err.code === 'EADDRINUSE') {
          console.log(`Port ${port} is in use, trying ${port + 1}`);
          startServer(port + 1);
        } else {
          console.error('Server error:', err);
        }
      })
      .on('listening', () => {
        console.log(`Server started on port ${port}`);
      });
    
    return server;
  };

  // 초기 포트로 서버 시작
  startServer(PORT);
  
  console.log(`Server running on port ${PORT}`);
  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
  
  // 서버 정보 출력
  console.log('Server configuration:');
  console.log(`- Port: ${PORT}`);
  console.log(`- Google Sheets API: ${process.env.USE_SERVICE_ACCOUNT === 'true' ? 'Enabled' : 'Disabled'}`);
  console.log(`- Session Secret: ${process.env.SESSION_SECRET ? 'Configured' : 'Not configured'}`);
  console.log(`- JWT Secret: ${process.env.JWT_SECRET ? 'Configured' : 'Not configured'}`);
} else {
  // Vercel 환경에서는 정보만 출력
  console.log(`Vercel serverless function initialized`);
  console.log(`Environment: ${process.env.NODE_ENV}`);
  console.log(`Google Sheets API: ${process.env.USE_SERVICE_ACCOUNT === 'true' ? 'Enabled' : 'Disabled'}`);
}

// Vercel 환경에서 사용할 모듈 내보내기
module.exports = app;